From 9fd08e383a7868a885e0be3abeeefe50967e8ff0 Mon Sep 17 00:00:00 2001
From: Bo Gan <bg2539@bug01.cs.columbia.edu>
Date: Thu, 3 Mar 2016 19:28:46 -0500
Subject: [PATCH] patch for chromium

---
 lib/tsan/rtl/tsan_interceptors.cc  | 4 ++--
 lib/tsan/rtl/tsan_interface_ann.cc | 3 ++-
 lib/tsan/rtl/tsan_rtl.cc           | 6 ++++++
 lib/tsan/rtl/tsan_rtl.h            | 2 +-
 4 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/lib/tsan/rtl/tsan_interceptors.cc b/lib/tsan/rtl/tsan_interceptors.cc
index b1a7ae6..92ec06a 100644
--- a/lib/tsan/rtl/tsan_interceptors.cc
+++ b/lib/tsan/rtl/tsan_interceptors.cc
@@ -2465,8 +2465,8 @@ void InitializeInterceptors() {
 
   // Instruct libc malloc to consume less memory.
 #if !SANITIZER_FREEBSD
-  mallopt(1, 0);  // M_MXFAST
-  mallopt(-3, 32*1024);  // M_MMAP_THRESHOLD
+  //mallopt(1, 0);  // M_MXFAST
+  //mallopt(-3, 32*1024);  // M_MMAP_THRESHOLD
 #endif
 
   InitializeCommonInterceptors();
diff --git a/lib/tsan/rtl/tsan_interface_ann.cc b/lib/tsan/rtl/tsan_interface_ann.cc
index fd3c846..bae4ab4 100644
--- a/lib/tsan/rtl/tsan_interface_ann.cc
+++ b/lib/tsan/rtl/tsan_interface_ann.cc
@@ -47,9 +47,10 @@ class ScopedAnnotation {
 };
 
 #define SCOPED_ANNOTATION(typ) \
-    if (!flags()->enable_annotations) \
+    if (!flags()->enable_annotations || !ctx->initialized) \
       return; \
     ThreadState *thr = cur_thread(); \
+    if(!thr->is_inited) return;\
     const uptr caller_pc = (uptr)__builtin_return_address(0); \
     StatInc(thr, StatAnnotation); \
     StatInc(thr, Stat##typ); \
diff --git a/lib/tsan/rtl/tsan_rtl.cc b/lib/tsan/rtl/tsan_rtl.cc
index 63c356b..1ec4cfd 100644
--- a/lib/tsan/rtl/tsan_rtl.cc
+++ b/lib/tsan/rtl/tsan_rtl.cc
@@ -730,6 +730,8 @@ bool ContainsSameAccess(u64 *s, u64 a, u64 sync_epoch, bool is_write) {
 ALWAYS_INLINE USED
 void MemoryAccess(ThreadState *thr, uptr pc, uptr addr,
     int kAccessSizeLog, bool kAccessIsWrite, bool kIsAtomic) {
+  if(!ctx->initialized || !thr->is_inited)
+    return;
   u64 *shadow_mem = (u64*)MemToShadow(addr);
   DPrintf2("#%d: MemoryAccess: @%p %p size=%d"
       " is_write=%d shadow_mem=%p {%zx, %zx, %zx, %zx}\n",
@@ -911,6 +913,8 @@ void MemoryRangeImitateWrite(ThreadState *thr, uptr pc, uptr addr, uptr size) {
 
 ALWAYS_INLINE USED
 void FuncEntry(ThreadState *thr, uptr pc) {
+  if(!ctx->initialized || !thr->is_inited)
+    return;
   StatInc(thr, StatFuncEnter);
   DPrintf2("#%d: FuncEntry %p\n", (int)thr->fast_state.tid(), (void*)pc);
   if (kCollectHistory) {
@@ -933,6 +937,8 @@ void FuncEntry(ThreadState *thr, uptr pc) {
 
 ALWAYS_INLINE USED
 void FuncExit(ThreadState *thr) {
+  if(!ctx->initialized || !thr->is_inited)
+    return;
   StatInc(thr, StatFuncExit);
   DPrintf2("#%d: FuncExit\n", (int)thr->fast_state.tid());
   if (kCollectHistory) {
diff --git a/lib/tsan/rtl/tsan_rtl.h b/lib/tsan/rtl/tsan_rtl.h
index a13e4b6..b510787 100644
--- a/lib/tsan/rtl/tsan_rtl.h
+++ b/lib/tsan/rtl/tsan_rtl.h
@@ -732,7 +732,7 @@ Trace *ThreadTrace(int tid);
 extern "C" void __tsan_trace_switch();
 void ALWAYS_INLINE TraceAddEvent(ThreadState *thr, FastState fs,
                                         EventType typ, u64 addr) {
-  if (!kCollectHistory)
+  if (!kCollectHistory || !ctx->initialized)
     return;
   DCHECK_GE((int)typ, 0);
   DCHECK_LE((int)typ, 7);
-- 
1.9.1

